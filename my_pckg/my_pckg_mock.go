// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package my_pckg is a generated GoMock package.
package my_pckg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpler is a mock of Simpler interface.
type MockSimpler struct {
	ctrl     *gomock.Controller
	recorder *MockSimplerMockRecorder
}

// MockSimplerMockRecorder is the mock recorder for MockSimpler.
type MockSimplerMockRecorder struct {
	mock *MockSimpler
}

// NewMockSimpler creates a new mock instance.
func NewMockSimpler(ctrl *gomock.Controller) *MockSimpler {
	mock := &MockSimpler{ctrl: ctrl}
	mock.recorder = &MockSimplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpler) EXPECT() *MockSimplerMockRecorder {
	return m.recorder
}

// ConcurrentMethod mocks base method.
func (m *MockSimpler) ConcurrentMethod() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConcurrentMethod")
}

// ConcurrentMethod indicates an expected call of ConcurrentMethod.
func (mr *MockSimplerMockRecorder) ConcurrentMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcurrentMethod", reflect.TypeOf((*MockSimpler)(nil).ConcurrentMethod))
}

// SimpleMethod mocks base method.
func (m *MockSimpler) SimpleMethod() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SimpleMethod")
}

// SimpleMethod indicates an expected call of SimpleMethod.
func (mr *MockSimplerMockRecorder) SimpleMethod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleMethod", reflect.TypeOf((*MockSimpler)(nil).SimpleMethod))
}
